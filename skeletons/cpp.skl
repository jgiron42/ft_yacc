#include "%%[HEADER_NAME]%%"


#include <sys/types.h>
#include <string.h>
#define YY_STACK_ELEMENT(N) (yy_stack[yy_stack_size - 1 + (N - 1)].value)
#ifdef YY_COMPLETE_SYMBOL
# include <variant>
// variant
# define YY_ACCESS_TYPE(ELEM, TYPE) (std::get<TYPE>(ELEM))
#else
// union
# define YY_ACCESS_TYPE(ELEM, TYPE) (ELEM.TYPE)
#endif
#define YYRECOVERING (yy_error_state != 0)
#define YYERROR do {yy_error_state=4;goto yy_end_of_semantic_action;} while (0)
#define yyerrok do {yy_error_state = 0;} while (0)
#define yyclearin do {if (yy_stack_size) yy_stack_top()->token = -1;} while (0)
#define YYACCEPT do {return 0;} while (0)
#define YYABORT do {return 1;} while (0)
#define YY_END 0
#define YY_EPSILON 1
#define YY_ACCEPT %%[ACCEPT_STATE]%%

YYSTYPE			yylval;

#ifdef YY_USE_CPP_LEX
yyParser::yyParser(%%[SYM_PREFIX]%%Lexer &l) : lexer(l)
#else
yyParser::yyParser()
#endif
{

}

int yyParser::yy_stack_push(yyParser::yy_stack_type value)
{
	if (yy_stack_size >= yy_stack_cap) {
		yy_stack_cap = yy_stack_cap ? 2 * yy_stack_cap : 50;
		yy_stack = (yyParser::yy_stack_type*)realloc(yy_stack, yy_stack_cap * sizeof(yy_stack_type));
		if (!yy_stack)
			return 1;
	}
	yy_stack[yy_stack_size] = value;
	yy_stack_size++;
	return 0;
}

void yyParser::yy_stack_pop(size_t n)
{
//	if (n > yy_stack_size)
//		yy_stack_size = 0;
//	else
	yy_stack_size -= n;
}

yyParser::yy_stack_type *yyParser::yy_stack_top()
{
	return yy_stack + yy_stack_size - 1;
}

int	yyParser::yy_lookahead()
{
	if (yy_stack_top()->token == -1)
	{
#ifdef YY_USE_CPP_LEX
# ifdef YY_COMPLETE_SYMBOL
		auto p = lexer.yylex();
		int yytok = p.first;
# else
		int yytok = lexer.yylex();
# endif
#else
		int yytok = yylex();
#endif
//#endif

#ifdef YYDEBUG
		if (yydebug)
			fprintf(stderr, "lex %d\n", yytok);
#endif
		if (yytok < 0)
			yytok = 0;
		if (yytok >= (sizeof(yy_map_token) / sizeof(*yy_map_token)) || (yytok != 0 && !yy_map_token[yytok]))
			yy_stack_top()->token = -2;
		else
			yy_stack_top()->token = yy_map_token[yytok];
//#ifdef YY_COMPLETE_SYMBOL
//		yy_stack_top()->value = p.second;
//#else
		yy_stack_top()->value = yylval;
//#endif
	}
	return yy_stack_top()->token;
}

int	yyParser::yy_shift(int state)
{
	return yy_stack_push((yy_stack_type){state, -1});
}


int yyParser::yyinternal_yyparse(void)
{
	int yy_error_state = 0;
	yy_shift(0);
	while (yy_stack_top()->state != YY_ACCEPT)
	{
		int yytok;
#ifdef YYDEBUG
		if (yydebug)
		{
			fprintf(stderr, "state: %d\n", yy_stack_top()->state);
			if (yy_yacc_transitions[yy_stack_top()->state][YY_EPSILON] >= 0)
				fprintf(stderr, "lookahead: %d\n", yy_lookahead());
		}
#endif
		if (yy_yacc_transitions[yy_stack_top()->state][YY_EPSILON] < 0) // epsilon reduce
		{
			yytok = YY_EPSILON;
			goto yy_reduce;
		}
		else if (yy_lookahead() >= 0 && yy_yacc_transitions[yy_stack_top()->state][yy_lookahead()] > 0) // shift
		{
#ifdef YYDEBUG
			if (yydebug)
				fprintf(stderr, "shift and go to %d\n", yy_yacc_transitions[yy_stack_top()->state][yy_lookahead()]);
#endif
			int yystate = yy_yacc_transitions[yy_stack_top()->state][yy_lookahead()];
			yy_shift(yystate);
			if (YYRECOVERING)
				yy_error_state--;
		}
		else if (yy_lookahead() >= 0 && yy_yacc_transitions[yy_stack_top()->state][yy_lookahead()] < 0) // reduce
		{
			yytok = yy_lookahead();
			yy_reduce:;
#ifdef YYDEBUG
			if (yydebug)
				fprintf(stderr, "reduce with rule %d\n", -yy_yacc_transitions[yy_stack_top()->state][yytok]);
#endif
			int yy_rule = -yy_yacc_transitions[yy_stack_top()->state][yytok];
			int yy_lookahead = yy_stack_top()->token;
			yy_stack_pop(yy_reduce_table[-yy_yacc_transitions[yy_stack_top()->state][yytok]]);
			switch (yy_rule)
			{
				%%[RULES]%%
			}

			yy_end_of_semantic_action:;
			yy_stack_top()->token = yy_reduce_tokens[yy_rule];
			yy_stack_top()->value = yylval;
#ifdef YYDEBUG
			if (yydebug)
				fprintf(stderr, "goto %d\n", yy_yacc_transitions[yy_stack_top()->state][yy_stack_top()->token]);
#endif
			yy_stack_push((yy_stack_type){ yy_yacc_transitions[yy_stack_top()->state][yy_stack_top()->token], yy_lookahead });
			if (yy_error_state == 4) // special value, set by YYERROR
			{
				yy_error_state = 0;
				goto yy_error_lbl;
			}
		}
		else // error
		{
			if (!YYRECOVERING
#ifdef YYDEBUG
				|| yydebug
#endif
					)
				yyerror("syntax error");
			yy_error_lbl:;
			if (yy_error_state == 3)
			{
				if (yy_lookahead() == YY_END)
					return 1;
				yy_stack_top()->token = -1;
#ifdef YYDEBUG
				if (yydebug)
					fprintf(stderr, "discard\n");
#endif
			}
//			else
//			{
			int save_lookahead = yy_stack_top()->token;
			YYSTYPE save_lookahead_value = yy_stack_top()->value;
			while (yy_stack_size > 0 &&	yy_yacc_transitions[yy_stack_top()->state][yy_map_token[error]] <= 0)
				yy_stack_pop(1);
			if (yy_stack_size == 0)
			{
#ifdef YYDEBUG
				if (yydebug)
						fprintf(stderr, "stack is empty, stop the parsing\n");
#endif
				return 1;
			}
			yy_shift(yy_yacc_transitions[yy_stack_top()->state][yy_map_token[error]]);
#ifdef YYDEBUG
			if (yydebug)
					fprintf(stderr, "shift error token\n");
#endif
			yy_stack_top()->token = save_lookahead;
			yy_stack_top()->value = save_lookahead_value;
			yy_error_state = 3;
//			}
		}
	}
#ifdef YYDEBUG
	if (yydebug)
		fprintf(stderr, "accept\n");
#endif
	return 0;
}

int yyParser::yyparse(void)
{
	yy_stack = NULL;
	yy_stack_size = 0;
	yy_stack_cap = 0;
	int ret = yyinternal_yyparse();
	free(yy_stack);
	return ret;
}

%%[TAIL_CODE]%%